// This file is generated by ConstMaker, DON'T MODIFY.

/**
 *this is a test
 */
const String Table = "table"; // hello word
const String AllowTest = "at";
const int Percent = -100;

/** pi */
const double Pi = 3.14159;

/**
 * colors
 */
enum Colors {
    KNoneDef(0),
    KBlueDef((1 << 0)),
    KGreenDef((1 << 1)),
    KRedDef((1 << 2)),
    KAllDef(0x7);

    static const String KNoneDefStr = "KNoneDef";
    static const String KBlueDefStr = "KBlueDef";
    static const String KGreenDefStr = "KGreenDef";
    static const String KRedDefStr = "KRedDef";
    static const String KAllDefStr = "KAllDef";

    final int value;
    const Colors(this.value);

    factory Colors.fromValue(int value) {
        switch (value) {
            case 0: return Colors.KNoneDef;
            case 0x1: return Colors.KBlueDef;
            case 0x2: return Colors.KGreenDef;
            case 0x4: return Colors.KRedDef;
            case 0x7: return Colors.KAllDef;
            default: throw StateError('Colors.fromValue: invalid value=$value');
        }
    }
}

class Node {
    static const String HtmlBlockId = "Block";
    static const String HtmlTableId = "Table";
}

class Item {
    static const String AllowTest = "at";
    static const double Pi = 3.14159;
    static const String Table = "table";
    static const int Percent = 100;
    static const int NoneId = 0;
    static const int AllowTestId = (1 << 0);
    static const int PiId = (1 << 1);
    static const int TableId = (1 << 2);
    static const int PercentId = (1 << 3);
    static const int AllId = 0xf;
}

enum ItemColors {
    Blue,
    Green, // green
    Red,
}

class ItemNode {
    static const String Border = "border";
}

enum ItemNodeColors {
    Red,
    Green, // green
    Blue,
}
const String ItemNodeColorsRedStr = "Red";
const String ItemNodeColorsGreenStr = "Green";
const String ItemNodeColorsBlueStr = "Blue";

class ItemNodeQuick {
    static const String Item = "item";
}

class ItemNodeQuickNode {
}

class Css3 {
    static const String XWebkitAirplay = "x-webkit-airplay";
    static const String WebkitTextZoom = "-webkit-text-zoom";
    static const String WebkitBackdropFilter = "-webkit-backdrop-filter";
    static const String WebkitBorderHorizontalSpacing = "-webkit-border-horizontal-spacing";
    static const String WebkitBorderVerticalSpacing = "-webkit-border-vertical-spacing";
    static const String WebkitBoxAlign = "-webkit-box-align";
    static const int NoneId = 0;
    static const int XWebkitAirplayId = (1 << 0);
    static const int WebkitTextZoomId = (1 << 1);
    static const int WebkitBackdropFilterId = (1 << 2);
    static const int WebkitBorderHorizontalSpacingId = (1 << 3);
    static const int WebkitBorderVerticalSpacingId = (1 << 4);
    static const int WebkitBoxAlignId = (1 << 5);
    static const int AllId = 0x3f;
}